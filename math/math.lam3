-- Id
@Id = (i: #L) '-> (T: #U i) '-> (t: T) -> T :> t;

-- Void
@Void = (i: #L) -> (A: #U i) -> A;

-- Union
@Union = (i: #L) -> (A: #U i) -> (B: #U i) -> (P: #U i) -> (l: (a: A) -> P) -> (r: (b: B) -> P) -> P;
@Left = (i: #L) -> (A: #U i) -> (B: #U i) -> (a: A) -> Union i A B :> (P: #U i) -> (l: (a: A) -> P) -> (r: (b: B) -> P) -> l a;
@Right = (i: #L) -> (A: #U i) -> (B: #U i) -> (b: B) -> Union i A B :> (P: #U i) -> (l: (a: A) -> P) -> (r: (b: B) -> P) -> r b;

-- Pair
@Pair = (i: #L) -> (A: #U i) -> (B: (a: A) -> #U i) -> #U i+1 :> 
  (P: #U i) -> (p: (a: A) -> (b: B a) -> P) -> P;
@pair = (i: #L) -> (A: #U i) -> (B: (a: A) -> #U i) -> (a: A) -> (b: B a) -> Pair i A B :>
  (P: #U i) -> (p: (a: A) -> (b: B a) -> P) -> p a b;
@first = (i: #L) -> (A: #U i) -> (B: (a: A) -> #U i) -> (p: Pair i A B) -> A :>
  p A [(a: A) -> (b: B a) -> a];
-- @second = (i: #L) -> (A: #U i) -> (B: (a: A) -> #U i) -> (p: Pair i A B) -> @a = [first i A B p]; B a :>
--   p [B a] [(a: A) -> (b: B a) -> b];

-- Equal
@Equal = (i: #L) -> (A: #U i) -> (a: A) -> (b: A) -> #U i+1 :>
  (P: (a: A) -> #U i) -> (p: P a) -> P b;
@Refl = (i: #L) -> (A: #U i) -> (a: A) -> Equal i A a a :>
  (P: (a: A) -> #U i) -> (p: P a) -> p;

@rho = (i: #L) -> (T: #U i) -> (t1: T) -> (t2: T) -> (e: Equal i T t1 t2) -> (Tt: (t: T) -> #U i) -> (t: Tt t1) -> Tt t2 :>
  e [(t: T) -> Tt t] t;

@symm = (i: #L) -> (A: #U i) -> (a: A) -> (b: A) -> (e: Equal #i+1 A a b) -> Equal i A b a :> -- WARNING: should `e` be of level #i+1
  (P: (a: A) -> #U i) -> e [(x: A) -> (p: P x) -> P a] [Refl i A a P];

-- Nat
@CNat = (i: #L) '-> (P: #U i) '-> (s: (p: P) -> P) -> (z: P) -> #U i :> P;
@CZero = (i: #L) '-> (P: #U i) '-> (s: (p: P) -> P) -> (z: P) -> CNat 'i 'P s z :> z;
@CSucc = (i: #L) '-> (n: CNat 'i) -> (P: #U i) '-> (s: (p: P) -> P) -> (z: P) -> CNat 'i 'P s z :> s [n 'P s z];

@INat = (i: #L) '-> (n: CNat 'i) '-> (P: (n: CNat 'i) '-> #U i) '-> (s: (n: CNat 'i) '-> (p: P 'n) -> P '[CSucc 'i n]) -> (z: P '[CZero 'i]) -> #U i :> P 'n;
@IZero = (i: #L) '-> (P: (n: CNat 'i) '-> #U i) '-> (s: (n: CNat 'i) '-> (p: P 'n) -> P '[CSucc 'i n]) -> (z: P '[CZero 'i]) -> INat 'i '[CZero 'i] 'P s z :> z;
@ISucc = (i: #L) '-> (n: CNat 'i) '-> (in: INat 'i 'n) -> (P: (n: CNat 'i) '-> #U i) '-> (s: (n: CNat 'i) '-> (p: P 'n) -> P '[CSucc 'i n]) -> (z: P '[CZero 'i]) -> INat 'i '[CSucc 'i n] 'P s z :> s 'n [in 'P s z];

@Nat = (i: #L) '-> (n: CNat 'i /\ INat 'i 'n);
@IdNat = (n: Nat) -> Nat :> n;
@Zero = (i: #L) '-> Nat 'i :> CZero 'i ^ IZero 'i;
@Succ = (i: #L) '-> (n: Nat 'i) -> Nat 'i :> CSucc 'i n.1 ^ ISucc 'i 'n.1 n.2;
@c2nat = (i: #L) '-> (c: CNat '#i+1) -> c '[Nat 'i] [Succ 'i];
